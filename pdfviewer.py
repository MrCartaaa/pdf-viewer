"""
This software is available for your use under a MODIFIED LGPL3+ license

This notice, these first 37 lines of code shall remain unchanged

 #     #                                        
 ##   ##  ####  #####  # ###### # ###### #####  
 # # # # #    # #    # # #      # #      #    # 
 #  #  # #    # #    # # #####  # #####  #    # 
 #     # #    # #    # # #      # #      #    # 
 #     # #    # #    # # #      # #      #    # 
 #     #  ####  #####  # #      # ###### #####  


888      .d8888b.  8888888b.  888      .d8888b.          
888     d88P  Y88b 888   Y88b 888     d88P  Y88b         
888     888    888 888    888 888          .d88P         
888     888        888   d88P 888         8888"    888   
888     888  88888 8888888P"  888          "Y8b. 8888888 
888     888    888 888        888     888    888   888   
888     Y88b  d88P 888        888     Y88b  d88P         
88888888 "Y8888P88 888        88888888 "Y8888P"          


And just what is that?  Well, it's LPGL3+ and these FOUR simple stipulations.
1. These and all comments are to remain in this document
2. You will not post this software in a repository or a location for others to download from:
   A. Unless you have made 10 lines of changes
   B. A notice is posted with the code that it is not the original code but instead derived from an original
3. Forking is OK and does NOT require any changes as long as it is obvious forked and stated on the page
   where your software is being hosted.  For example, GitHub does a fantastic job of indicating if a repository
   is the result of a fork.
4. This software code is only avaiable on github(https://github.com/Zain-Bin-Arshad/PDF-Viewer). 
   If you've obtained this software in any other way, then those listed here, then SUPPORT WILL NOT BE PROVIDED.

-----------------------------------------------------------------------------------------------------------------
"""

import os
import sys
import fitz
import PySimpleGUI as sg


DEF_PAD = sg.DEFAULT_ELEMENT_PADDING
LOGO = b'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'
CLOSE = b'iVBORw0KGgoAAAANSUhEUgAAACEAAAAhCAMAAABgOjJdAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFHUExURQAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAABQUFAAAAAAAAA8PDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBQAAAAUFBQAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgAAAAAAAAAAAAAAAAAAAAICAgAAAAICAgAAAAAAAAICAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAAAAAAAAEBARsYxhIAAABrdFJOUwABAQIDBAkLDA0NDhERFxgZHCEjJScoKSstLjAwMTI5Ojs8QkNDREpLTFhpbG5ydXd4e3x9fn6AgYKDhIWGhoeIiImkqLS2t72+v8DBw8TFxsfI09jZ2dze4OHi5ufo6evx9Pf4+fr7+/z9HaXqzQAAAAlwSFlzAAALEgAACxIB0t1+/AAAAa1JREFUOE91U+dfwjAQvVgUt7hAxQpCcePCXQduBbeiAiLuovX//+zlki6tL3CXXN7v3V2SAjAOsmIqYS1AMvjkFxRrQzg2MDbqwXiPI8KNor9+Gh6Y+444t6OvUz2RSBiHNN0Hl8Aoj8gCa/dtIrmN3StvluXvyf6oOqiqURzc9B1edwUkgRhLJtZRkyUQvs1Sr9AXjLW7WDI1ojlIJaY/VDdDLzTy5G4kjUHJIKsXmnEiz4gAWk1oyEr12yb0go6e/1NGlJYox61eaAIIrgzTQklPgAKazSBLjIajahwwMm+m0WmGN0uhBYMdZ5U4Jyxg0E8DXej8ITZLBB8NZCgM2nMv73Mi5GjYDOwVYMN8xlqw8X+yQOZrK1eJkZxvpZAxM9BxUUWKb6UAi0gApDzxpn0qhdbTRf46IZRfhTq/ShlrrafnC8EgnanPzdGcg8+1mtCwstDN1VFE4PfNrd80gofwp5eZSjtyPUiKXrBy0gg/5jez2ewODjLbO/re25BLg0HiuFwqulAqlk865R45BQ8ioATw5zK0Lyv9B65vjsP9jMXCEvEaC3aEwQ8SIlBGc1pXAwAAAABJRU5ErkJggg=='
ZOOM_OUT = b'iVBORw0KGgoAAAANSUhEUgAAABUAAAAWCAQAAACFih+zAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAHdElNRQfkBQkLJxOmxy+UAAABwUlEQVQoz4XSvUvVYRQH8M/vxWsEVhilaUEmgtESNEQtJdQQDYJDQ4tTTUVLEP4FTUWTNRQ0WPRCSQ0OQUSQZRBYlOUQai9TUUgE4dX7Ow1e773S0DnwnOec831ezvecBCQShc369dki9dMro95X4w2SSGRO+Swa9JdhrUgbgax1S6gI37w0bk6hEKb0NIIT3BTCnBM6rNFsoyPGhfBWWxUDTgphQmctmCB3WQgj9XtbTQsfbUVJJpXKNEnxQFh0ABkMCmFwxa1Jil3mhSvLXu4QZo1ab4NK7VchtWDKYwP2a7Ioye3ApO3ua10FJXHMMwM6tftCrgXzunUrGjm0JLfXV6RKkPuNNmPO6VSu0yK14KLTKCwuh0aEGesa2Wso7I7wTglJ6gm6HEWzTC6rriWFXofxXFkqaDMrTGtHU60FmRS3hYq+OpFnhPC02sJlhUtCuF4HJrgrhGnHbZKgxUGPhLJwo354OXVPKBQ+mTDug7IQ/lgSrlVfq5qSId+FojavC67aY1IIw0hXykhVbNNvnw6pH9546LXQZUwvLjhbn9qMf3jN0WNGCOdXpzKpRFLdqda+06ww77+SY7cXhv4C4/CXl+0KD7sAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjAtMDUtMDlUMTE6Mzk6MTktMDc6MDDYvw5HAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIwLTA1LTA5VDExOjM5OjE5LTA3OjAwqeK2+wAAAABJRU5ErkJggg=='
ZOOM_IN = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAXCAQAAAC7KEemAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAHdElNRQfkBQkLJSe1RbmjAAACN0lEQVQ4y43TS2hVVxQG4G+fc2K8vdWqQXxMKkJ8QAQdqKCIiIZm4KAqFAdiEUWcOOhQcaZFdOA0+IBCUVEUdCYVxEGVViha0dYnUtH4QJN7MZqb4L1nd3BPkos4cK3RZv3/Zq1//StoRqqBOZZabLqg3203PRirfBIZZjvsnro4lk/0mof0c/A1/i1gI/r0GS5ez2xAWys8QY+KKHrsgFXW6bbSPndEUc2WAlVEsNALuei8ueh01z2LMFOvKPfOilZK5owo+lWG1C5RtFsq4JAouqYsCE3CClW5W2ZIfSXxo7qGHRIlmbLfRMM2FrNKrPcNjnmtYUhuRCIxLFdT90GvmnY9iM2Glooqruj2g7q6BQK2WS6TueiG5zotNNk7QeQf0V1dXrZsYDz7feuq6JaZCCQCMlXXjaioGAI1VVU1vxuQNaGjGr2wQIeSreaJPtjkoOBnZ5XxyCQz8N7wKOEva02z2gl/g2fgucfFl+vMxkNVqZzEJYOCnaZIlQQlDbmSYKJMux3K6i7THJkJLohyRwWJzGZRtFUqw3656E9fjy+Oxd5qiE6YhYn2O6iMKY6IGj7qbjVggk2GRNEdeywz1VRL/OSPQtqPerW32rwN33talN8b0G+weL0qfPyLCa0GTNHpuL5PlnZalx796qIzJgmSMEZpYL6VFukQVNx33W3wnVM6cM52g62HNNrjuB6pVBvWeKMhOqnUentNWVOJRCotLqI54yr/iQZ0+aLIsNwVe7X/DzRI2aaqdcYcAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIwLTA1LTA5VDExOjM3OjM5LTA3OjAwhFM5iQAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMC0wNS0wOVQxMTozNzozOS0wNzowMPUOgTUAAAAASUVORK5CYII='
FIRST_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAACYAAAAmCAMAAACf4xmcAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADzUExURQAAAAAAAAAAAFVVVQAAAEBAQDMzMwAAACsrKwAAAAAAACAgIAAAAAAAAAAAAAsLCwAAAAAAAAAAAAoKCgkJCQkJCQUFBQUFBQUFBQQEBAQEBAMDAwAAAAAAAAICAgcHBwQEBAICAgYGBgYGBggICAQEBAgICAICAgQEBAYGBgQEBAcHBwcHBwcHBwQEBAcHBwQEBAICAgAAAAICAgAAAAEBAQEBAQEBAQMDAwMDAwEBAQAAAAEBAQMDAwMDAwMDAwQEBAUFBQQEBAICAgEBAQQEBAEBAQICAgEBAQICAgEBAQICAgMDAwAAAAEBAQICAgMDA9UvN4kAAABNdFJOUwABAgMEBAUGBgcICAoVFhcYGRoaGxwwNjc6O1RaZmhydHV2hoeIiImJiouLjI2Ojo+lp6eos7S1tba6u7u7vL29x8jk7Ozt7v39/v7+Ym5s7wAAAAlwSFlzAAAOnAAADpwBB5RT3QAAASpJREFUOE/VkmdfwjAQh+MWnEHEjQNwD1zFOnDgQnoXvv+nMU2utcEkfavPq3/u9/yul/TY/6CyPErJx2rnfZ2ij6qAS4o+NhAuKMYUZ4comZgav3nbGqZsYGjlEPF5mg4GWY23Eb+2rV/NaOVQQP+sSCeTH423BUa7Y/owSKrJuYQ4mVT5N4nGHwVEdUevVJO9oH88oWsWtMafEKLaCNUsKG0xFCiOXHPFKO1QwGfd+voJSttD6B5490lppQBBNAtUsqGvMH+L0Nsfp5oFrbGFAACbeQ8in+QeoNdwzpdorNRCwFNXv1Rj/E7O18j79XK+Fsj7TtHJJKMx/iC9nby1lF6A+JK75IzNXX9surpdUYwpzFAYoIpwTtHHSud1jaKXypJ3g/4ojH0D+V82Si9hgoIAAAAASUVORK5CYII='
PRE_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfkBQkKKCyW+3RRAAACG0lEQVQ4y23Uy2tUZxgG8N85ZyZQ3GRlWrUGL6mmUnBRcOGi6NqVaGImamhd2GKhBReFUql/hKuKV3CpK0EEQdJ6qysXtWhVuixITaKmXjJzztvFfHOcCb6rw/c8z3v5vuc99KKQYdxxd70Wwmu/+9kmZArLosB6F3SEN/5wzTX3vRHazhtNjAH6AS+EGyaslIHMiEm3hAVT/ZICR4Wn9pDITc063T7/Ct/1JAUOCg+NodCQp1yFXEOBzR4LrZ5kzCvPbCJlbeCQmfTVPf3UgpfWdUueE/YN0KdVSpMDkgPCSRgXfkVe01tKHR0dE7Ukx22lMY6l7hqpw5ZSpVSqkqRI6IzwAze1rUYuR0uYMyuEWQvCRI2tFa6z6M/6cj/XFnY5LISv7Bbe2prQwl/mcyv8U0+wSsOXLhsGwy45bMhImqL01HCjfiqoHHEWHVDiFx8kPKRb+c+HMpUMV5WGLPWZZsgJOSqhMGI+d88nVqc6bVQDpqyEdkLX2Ohe7orCF/UUg/R3Jzl24EruIr5ZRo3+rmvZ1zou5R44Y7tpVZ8/82TvXjRVZmxz2hPYYNG88eSZbrc77UyTZZr4zAvPjfYebFp4ZHNt73eVuvbe4m9hsn8jvheemUrETFOzbmm/OeHb5Ts3ZUG4o+WjRM2tst9dYc5e79nqUWctCUsemDXroSXhrVM+Xk7vSjKM+clNi0J46Tc/2mDgN/M/ctKsO+x+mYQAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjAtMDUtMDlUMTA6NDA6NDQtMDc6MDD5MIYvAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIwLTA1LTA5VDEwOjQwOjQ0LTA3OjAwiG0+kwAAAABJRU5ErkJggg=='
NEXT_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfkBQkKJCVDkoP5AAACC0lEQVQ4y23US2vUZxQG8N//MitX3Vhi1NCGYKIIfgZdFKGrXhIzSYwgiAsxYgsFsdSP0E2pofQK/RaCTJu0qesWGg240dJIjGPirZOZOV3MO38y0bN7z/M877m857z0rZBh1DW/2hbCM8uuG0OmsMcKHPKt/4SWVQ0Nf2sJLT8YSYwB+sc2hTtmHZCDzJC6FaFperekwCVh02zyZGpqsnSa9li40pcUmBLuO4ZCme6HXKnAuHvCTF8y4qktx1GTyTDspJMOIkMNE554ZrR3z6IwnwBKLAjh03TqITPCdzBqxwpVIiUuC+FqJeihS8J47gOlm7sEUiKqovuCr/Fh7jRuo1sBg9bzdNHQcTp3wpoHiFR0/hq9ltCH7jqRe8u6TiKecklrQNBy0XvI5cK/9vXv6+UbvnShetMS53y1K2ZQatqv0FFgXcuiDU3Q9L7vtf1TVTHkObeFwykok0JTQwgNm0K9wobtWOaz9GxlSmVSW1dHR1dHPXlL1IXPGdPxe9W+Mkna2oleVt36RZiAb4S5gdGY0tE1MzAaZ4Qfe7W/Y1vT0QHJvPMD9CMee2GsP951Yc14Nd5F2pP+eI9ZFc7u3ogFYcOZquO1FC3DRx4Jn+zduWlN4TdT3q6Gb79JS8KWOW/Y6hE/2RFe+cstt/zpldD2s3f30nuSDEd84Q8vhfDSHTdMGPhm/gcpEqbqeJ/q0QAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0wNS0wOVQxMDozNjozNy0wNzowMOY48G8AAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMDUtMDlUMTA6MzY6MzctMDc6MDCXZUjTAAAAAElFTkSuQmCC'
LAST_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAACYAAAAmCAMAAACf4xmcAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADzUExURQAAAAAAAAAAAFVVVQAAAEBAQDMzMwAAACsrKwAAAAAAACAgIAAAAAAAAAAAAAsLCwAAAAAAAAAAAAoKCgkJCQkJCQUFBQUFBQUFBQQEBAQEBAMDAwAAAAAAAAICAgcHBwQEBAICAgYGBgYGBggICAQEBAgICAICAgQEBAYGBgQEBAcHBwcHBwcHBwQEBAcHBwQEBAICAgAAAAICAgAAAAEBAQEBAQEBAQMDAwMDAwEBAQAAAAEBAQMDAwMDAwMDAwQEBAUFBQQEBAICAgEBAQQEBAEBAQICAgEBAQICAgEBAQICAgMDAwAAAAEBAQICAgMDA9UvN4kAAABNdFJOUwABAgMEBAUGBgcICAoVFhcYGRoaGxwwNjc6O1RaZmhydHV2hoeIiImJiouLjI2Ojo+lp6eos7S1tba6u7u7vL29x8jk7Ozt7v39/v7+Ym5s7wAAAAlwSFlzAAAOnAAADpwBB5RT3QAAARJJREFUOE/VlNdOA0EMRb3LLpuE0ELvLfQWWkJoAUJnbef/v4bZ4ERaJHt4Q5ynO9LRlWdGM/AvCWemJZksPLXnJFqcIC1L/MFwUULGOdKSxBzByuvFqGTHqaKVH4nq47LQtWCdEW/7nqbBUM15jQlZqRrEm59I19Kna5AcEVKj0s2GBpHrw5tun6VBUiPEejafqcHgjpvvasynQdHtl+oVnwbR7jvStlcLq2/Iez6tsM/EzSmPNrCRIt27IzG15KCD1Jx0ydLiaorc8h1v4ZD5u8vS4q2U+M539aXjDrJ06Vqw9kHU69K18gP15srQtHD1+bLfZcwWjJQkZahanjNk5TnnWHxpz0u0iGZ/9dX8NQBfZyY2SvOVIRAAAAAASUVORK5CYII='
SEARCH = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAdCAMAAACOj/wDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAGPUExg6AAAACEdFJOUwABAgMEBQYHCAkKCw0PERUWFxgZGh8gISIlJykqKy0uLzAxNDU3ODs9P0VISktNUlVXWFlaXV5fYGFkZmdoaWprbG1vcHFydYKFh4iQlpianJ2en6CipKapr7O1vL7AxMXHyszP0dPU1tna3N7f4eLj5OXm6Onq6+3u7/Dx8vX29/j8/jlSQ8oAAAAJcEhZcwAADpwAAA6cAQeUU90AAAFTSURBVDhPjdLlW8JQGMbhYwcigo2JCnZ3i2K3InZhizkTTPT5wz1uz6Xg+OD9Zb/3Pfuwa5v4h/SGCbd7sjGDYyjT2CVU1+NpXP2w7cn9u6K8yct+KZeUdwqcjJaYzbbhY+CsmGtV8gawYtHa5AG2UrRWtQNrBrZIXAV62FLcJh5tbCn/ATvxbCGsAawwVR48FTKFqPrACFM1CNQyhaj7RCdT1Qw0MYWo/sAQU9UH1DGFKHjBElM1h5ff50vYxq2VLeUo8CaxJSewHMcWMYuAi/3NuAtMG7U2TAE7qVpr7Argbcs2GjNb5H1wxnKvqfTJ3f3R4d0n4LvyH7Ryr8ma8ctjKTBr6QZeO7gn68D8+vqCMy9KFN0Ab2GvJVSlfIT3Lg46FddAMOS7hSv/Pu3loFMu/7dgPwcdx4U8dUVz+st+DlzlctApu3iuZ0bgqGFEJsQX/wFag00Z1L4AAAAASUVORK5CYII='
SEARCH_DOWN = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAMAAAACJixMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACoUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzfSIYAAAA4dFJOUwACEhMVFhcYGRobHB0eHyAhIiQsLS4vMTQ2Nzqmqbu8wMHCw8XIyc3O0tPX2dzf4OHj5OXm5+rrVsYFQgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAJZJREFUKFN9ilkSgkAMBeMyCoiKgsKAC8rmjoDg/W/mMIkU8mFXJen3KgDQE9NBVrPtWoYW5mYu9uRyX2H+Yt6u0/oap9SSBWE9zks0I0lttBr7mSxIQYszhxScLNZIBXqUczSeRzoaooSFW1+3CBVZNKhB6Yn/V6BS0cAOlcfLI6PYgu3flT+m8MNw549IO/QHJH8A+ADnTgkm2RHu0QAAAABJRU5ErkJggg=='
SEARCH_UP = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAMAAAACJixMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACoUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzfSIYAAAA4dFJOUwACEhMVFhcYGRobHB0eHyAhIiQsLS4vMTQ2Nzqmqbu8wMHCw8XIyc3O0tPX2dzf4OHj5OXm5+rrVsYFQgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAJFJREFUKFONitsWQlAURbdKIUVRHLq401WI/v/POpc9GtFL82XNtfaGfxiPUAZMg8MEtccs6F5HGcsXctQSvwt/Lmr8JAB+G6s4IErSeCy9JlH4gOhpTf8ZpE51YQwtq1xUcKtMQ4VV/nBQKU6Zm8LWp7stTGCXBb8sLleLDx82t/OchrEb7ADb/ZKFxEsPCeANnKkJJnnspSYAAAAASUVORK5CYII='
DOTS = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAMAAAAWyLyOAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADeUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKk1tBUAAABJdFJOUwACAwQGBwgJCgwODxESExYaHB0eHyEiJCcwMjQ2ZGZnaXBzfoKGjZKTlJWXmZyhoqWtsby9wcPKztLU1dbk5enq6+zv8/T1+vuv/8AWAAAACXBIWXMAAA6cAAAOnAEHlFPdAAAAnUlEQVQoU4XNxxKCAAwE0EURG6CiKPaGDXsBFRs2lP//IRM5O+7pzW5mgj9JtJ1NUySkGrbdShOi9bXTSfIm9oMg8HuA1CUEZhwwn4Qh3+dv3Lk6ylvGrgJtz7jrNJYezKOB6rc71FB0Gb5BY2xJes8A2eJuogLTF2El8dPs3DtbGYI2unjjAkEdnK6LHG+AoCghIrIcCaWoQohfAT7YFxkhHQD05AAAAABJRU5ErkJggg=='
QUESTION = b'iVBORw0KGgoAAAANSUhEUgAAAB4AAAAdCAMAAACKeiw+AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFfUExURQAAAAAAAP///4CAgFVVVUBAQDMzMysrKyQkJCAgIBwcHBcXFxQUFBERERAQEA4ODg0NDQ0NDQsLCwoKCgkJCQkJCQkJCQgICAgICAgICAcHBwcHBwYGBgYGBgYGBgYGBgUFBQUFBQUFBQUFBQUFBQQEBAQEBAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAfm1ovwAAAB0dFJOUwABAQIDBAUGBwgJCw0PEBITFBcaHB0eHyEiIyUqKywtMDEyMzQ5QElMTk9RUlNWV2VoaW1uc3R1dnd4eXp7goOEi46TmJmam52eoKKjqKuys7S+xMbKy83R1dbX2Nna3+Dh4ubn6Orr7PHy8/T19/j5+vz+5IosfAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAh9JREFUOE9tUwtXUkEQ/tzdC6EYCEbQwx5oZWL5gDQ134RPSBF8lpoIBj4S5/+fvr1cOqeTc869Z+b7dmZnZ7+FNlobo+GPpJbLF83mRTk7HPF7cAeMQ1P+vvlz+WuV+ed+ZXEDzT9C4yce49nJeAgebZBYd7GzncLmZmHnzA3W4yxs+KnENxvvL7yPKkBFBxf2bbwVh6NhVDjPoJ7t9+FFenEx3Qdff7ZBKB9WBirwhW71UxAqs3cjcrOXUQhOVAnOBDTU60uRX58NMG1TaI1pwEzVRS5fanSuEFnzAQNHLVbkaADwrdFZDSDGgodJOJi9FfkYCn0QuZ1lmDwQuY5hVOQuxzNi8me1GFYqyqwNG+fuRMbAts9TdgQ8lLXHtqilUxxjHj9Y+5Gl7ZCevn03x94ylo4dinzHlchua/CECiwoUnpC2mBX5AoESl6yg4pljwfdGCV29W826d8bb1zWy7Z7x7x0S1cfthZ7e7PzylCbLooU2/4Q1+Yx5p3bmunp7e1pb5RjG6OIXYsccGqudXV3d7W89tQCq1zFmbvYtsh2y3PszFc6oV7xxupTxqK2tYrrONO8sQZvTLfueyLIhnEqcgqeKThZIzgTUG21NKxaMLK0NMLLTH711MJsB/EtBlZrCQ3oeFtrCcU6Vqnx+5Sa4G5WqezkP50fp12dU6n885U8u/eVaHQYvjD3jQ1ny7Vms1ZeTkUeQFlY6z/BLbYzfB6o5wAAAABJRU5ErkJggg=='
BLANK = b''
ERROR = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAdCAMAAACOj/wDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAIfUExjF7PQAAAC0dFJOUwABAgMEBQYJCgsMDQ4PEBETFBUWFxgZGhsdHh8gISIjJCUnKCkqKywtLjEyMzQ1Njc4OTo7PD0+P0BCQ0hJSktMTlRfYGFiY2VmaGlqa2xub3FydHd5ent9fn+AgYKGh4iNjo+QlJWXmJudnp+goaKjpaanqaqrrK2ur7CxsrS1vb7AwcLDxMbIycvNzs/R0tPU1dbX2Nrb3N3g5OXm5+jp6uvs7e7v8vP09fb3+Pn6+/z9/gNN9oAAAAAJcEhZcwAAC4gAAAuIAeWOKUkAAAIdSURBVDhPVZP5VxJRGIa/CENI1KJs0SSXoCjKBLOsaLXMVrPIFs0WKzdEzRbbzWyREgUpVExaBDJZ4v0Du3fmwsHnh/ne571n5pyZe4dSaHa2vPsB/BxprdCIKoX28DAQnpue/h4CRo7kilqitAdJd9dJa1mZpbZjLIG+LWKBUfUFE00bhdB6uxvj+4RQ5SQGzSJLmB7ha7Uciz+iWyfHFPntGC3hQX0XL9ZIVQarnuD+Sjarwr5KucnE7InUEGV34bqCWc5pJpzyxgJ2VVxBv5qK4h4TE2Vj3MUnbXiVeKBi0+hObKZa9PKObPP4UE5UMICFU/xJ5MAZcsQapEU6+hvD+tVOhC8sl/zs4gB9Dh6UMtGxXxhyInJZKWvNrJeCU9tlIToRAObtK4QZ/GEKfUt/x7xRYMoohPS+OM2l78xt+wPEnxYJNfhD5AraZNHciaL1fDL5eJ3s+2c91B2/KGVVy1/c0igbkOjPl4pziw/pOPp4VF6K4Z6WKMuOf+3ZvOlBPRXGvDt4toWdeXxm3VyoW8bmNndCT6oONPO3VhrEbmtNanZVNKGXTWvIb5HrTHZNRvhhUN/GS74PS9A9Q5t0CDe9h3OtVKXRdeKTXo4VXjzfLUcZ8yB8VpHJ4oL3RrEQKrw6gbE9QhglncC4s37vVmN1ncOdhKNULEjkHHgNRIIzM3MR4O0h9jWWoDFdexOIRgNDzWbxrxD9BzeioYdNQbSNAAAAAElFTkSuQmCC'
SPLASH_SCREEN = b''


class PDFViewer:
    def __init__(self, filename=None):
        self.document = None
        self.filename = ""
        self.total_pages = 0
        self.pages = None
        self.annotated_pages = None
        self.max_page_size = (770, 585)
        self.current_page = 0
        self.cur_search_index = 0
        self.searching = 0
        self.image_data = ()
        self.TOC_tree = sg.TreeData()
        self.form = self.initialize_gui()
        self.text_found_pages = []
        self.notes = {}


    def clear_window(self):
        self.TOC_tree = sg.TreeData()
        self.form['-TOC_TREE-'].update(values=self.TOC_tree)
        self.current_page = -1
        self.update_cur_page()
        self.form['-PAGE-'].update(data=BLANK)
        self.form['-TOTAL_PAGES-'].update(value="/ 0")
        self.form.TKroot.title('| DBR-PDFViewer')
        self.form['-MATCH_NUM_STATUS-'].update(value='0 / 0')
        self.filename = ''

    def fill_window(self):
        try:
            self.document = fitz.open(self.filename)
        except RuntimeError as error:
            self.show_popup('No such File')
            return

        self.total_pages = len(self.document)
        self.current_page = 0
        self.update_cur_page()
        self.load_notes()
        self.pages = [None] * self.total_pages
        self.annotated_pages = [None] * self.total_pages
        self.image_data = self.get_page_data(self.current_page)
        self.TOC_tree = sg.TreeData()
        toc = self.document.getToC()
        self.create_toc(toc, "", toc[0][0])

        # updating all elements
        self.form['-TOC_TREE-'].update(values=self.TOC_tree)
        self.form['-PAGE-'].update(data=self.image_data[0])
        self.update_cur_page()
        self.form['-TOTAL_PAGES-'].update(
            value="/ {}".format(self.total_pages))
        self.form.TKroot.title(
            '{} | DBR-PDFViewer'.format(self.filename.split('/')[-1]))

    @classmethod
    def get_filename(cls):
        if len(sys.argv) == 2:
            return sys.argv[1]
        else:
            filename = sg.PopupGetFile(
                "Select file to open:",
                title="PDF Browser",
                text_color='black',
                background_color='lightgrey',
                file_types=(
                    ("PDF Files", "*.pdf"),
                ),
                icon=LOGO,
                keep_on_top=True,
                button_color=('black', 'darkgrey')
            )
        return filename

    def create_image_btn(self, key, filename, tooltip, padding=None):
        return sg.Button("", key="-BTN_" + key,
                         image_data=filename,
                         button_color=("lightgrey", "lightgrey"),
                         border_width=0,
                         tooltip=tooltip,
                         pad=padding if padding else None,
                         )

    def fit_toc_label(self, length, data):
        counter, text = 0, ""
        for txt in data.split():
            counter += len(txt) + 1
            if counter < length:
                text += txt + " "
            else:
                counter = 0
                text += '\n' + txt
        return text

    def create_toc(self, contents, parent, phead):
        cons = iter(contents)
        for content in cons:
            i = contents.index(content)
            head, text = content[0], content[1]
            text = self.fit_toc_label(25, text)

            if head == phead:
                i += 1
                key = ''.join(text.split())
                self.TOC_tree.insert(parent, key, text, content[2])
            else:
                j = i
                while True:
                    j += 1
                    if j < len(contents) and contents[j][0] != phead:
                        next(cons, None)
                    else:
                        break
                self.create_toc(contents[i:j], key, head)

    def create_layout(self):
        menu = [
            ['&فائل', ['&کھولیں', '---', 'خصوصیات', '&بند کریں']],
            ['&ترمیم', ['دوبارہ کریں', 'کالعدم کریں'], ],
            ['&مدد', '&متعلق...'],
        ]

        frame_contents = [
            [sg.Tree(data=self.TOC_tree, headings=['نمبر', ],
                     col0_width=27,
                     col_widths=[0],
                     auto_size_columns=True,
                     key='-TOC_TREE-',
                     num_rows=30,
                     enable_events=True,
                     font='Consolas 11 bold',
                     row_height=40,
                     tooltip="فہرست",
                     header_font=('Consolas 12 bold'),
                     pad=(0, 0),
                     background_color='grey55',
                     ),
             ],
        ]

        column_content = [
            [
                sg.Frame(
                    "مشمولات",
                    title_color="black",
                    size=(50, self.max_page_size[1]),
                    font="Consolas 20 bold",
                    layout=frame_contents,
                    relief=sg.RELIEF_RIDGE,
                    border_width=4,
                    key="-CONTENTS_FRAME-",
                    background_color="lightgrey",
                    pad=DEF_PAD,

                ),
            ]
        ]

        frame_main = [
            [
                sg.Frame(title="",
                         relief=sg.RELIEF_RIDGE,
                         element_justification='center',

                         layout=[
                             [
                                 self.create_image_btn(
                                     "OPEN_FILE-", LOGO, 'فائل کھولیں', DEF_PAD),
                                 self.create_image_btn(
                                     "CLOSE_FILE-", CLOSE, 'فائل بند کریں', DEF_PAD),
                                 sg.VerticalSeparator(pad=DEF_PAD),
                                 self.create_image_btn(
                                     "ZOOM_OUT-", ZOOM_OUT, "زوم آؤٹ", DEF_PAD),
                                 sg.Slider(range=(0, 200),
                                           default_value=50,
                                           size=(15, 15),
                                           orientation='horizontal',
                                           font=('Consolas', 11),
                                           background_color="lightgrey",
                                           text_color="black",
                                           border_width=2,
                                           tooltip="زوم فیصد",
                                           enable_events=True,
                                           key="-ZOOM_SLIDER-",
                                           disable_number_display=True
                                           ),
                                 self.create_image_btn(
                                     "ZOOM_IN-", ZOOM_IN, "زوم ان", DEF_PAD),

                                 sg.VerticalSeparator(pad=DEF_PAD),

                                 self.create_image_btn(
                                     "FIRST_PAGE-", FIRST_PAGE, "پہلا صفحہ"),
                                 self.create_image_btn(
                                     "PREVIOUS-", PRE_PAGE, "پچھلا صفحہ", DEF_PAD),
                                 sg.In(str(self.current_page), size=(5, 2),
                                       do_not_clear=True, key="-PAGE_NUMBER-",
                                       tooltip="موجودہ صفحہ",
                                       background_color="white",
                                       font="Consolas 12",
                                       justification='center'),
                                 sg.T("/ {}".format(self.total_pages),
                                      font="Consolas 11",
                                      background_color="lightgrey",
                                      text_color="black",
                                      tooltip="کل صفحات",
                                      key="-TOTAL_PAGES-",
                                      pad=DEF_PAD,
                                      size=(6, 0),
                                      ),
                                 self.create_image_btn(
                                     "NEXT-", NEXT_PAGE, "اگلا صفحہ"),
                                 self.create_image_btn(
                                     "LAST_PAGE-", LAST_PAGE, "اخری صفحہ"),
                                 sg.VerticalSeparator(pad=DEF_PAD),
                                 sg.Frame("", layout=[[
                                     self.create_image_btn(
                                         "SEARCH-", SEARCH, "تلاش کریں", DEF_PAD),
                                     sg.In("تلاش کریں", size=(15, 1),
                                           do_not_clear=True,
                                           key="-FIND_TEXT-",
                                           tooltip="تلاش کریںم",
                                           background_color="white",
                                           justification="center",
                                           enable_events=True,
                                           font="Consolas 11",
                                           pad=DEF_PAD
                                           ),

                                     sg.T("0 / 0",
                                          font="Consolas 11",
                                          background_color="lightgrey",
                                          text_color="black",
                                          tooltip="کل میچ",
                                          key='-MATCH_NUM_STATUS-',
                                          auto_size_text=True,
                                          size=(6, 1),
                                          justification='center',
                                          pad=DEF_PAD
                                          )
                                 ],
                                     [
                                         sg.T("\t", background_color='lightgrey'),
                                         self.create_image_btn("DOWN_SEARCH-", SEARCH_DOWN, 'اگلی تلاش',
                                                               DEF_PAD),
                                         self.create_image_btn("UP_SEARCH-", SEARCH_UP, 'پچھلی تلاش',
                                                               DEF_PAD),
                                         sg.BMenu('', ['', ['پورا لفظ', 'حساس کیس']],
                                                  key='-BTN_DOTS-',
                                                  tooltip='جدید تللاس',
                                                  pad=DEF_PAD,
                                                  image_data=DOTS,
                                                  border_width=0,
                                                  button_color=(
                                                      'lightgrey', 'lightgrey'),
                                                  ),
                                 ]
                                 ],
                                     background_color='lightgrey',
                                     border_width=0,
                                 ),
                             ]
                         ],
                         border_width=0,
                         background_color="lightgrey",
                         key="-TOOLS_FRAME-",
                         )],
            [
                sg.Col(
                    layout=[[sg.T('', size=(94,0), background_color='grey55')], # Sizer element
                        [sg.Image(data=BLANK, key="-PAGE-", pad=DEF_PAD, enable_events=True, background_color='grey55')]],
                    size=(750, 590),
                    scrollable=True,
                    element_justification='center',
                    background_color='grey55',
                    justification='center'
                )

            ]
        ]

        main_col = [
            [sg.Col(frame_main, scrollable=False,
                    justification='center', element_justification='center')]
        ]

        notes_frame = [
            [sg.T('صفحہ نمبر : 0',
                  key='-NOTE_PAGENUMBER-',
                  background_color='lightgrey',
                  text_color='black',
                  font="Helvetica 15 bold",
                  size=(12, 1))
             ],
            [sg.Multiline("",
                          size=(40, 30),
                          text_color='black',
                          key='-NOTE_TEXT-',
                          pad=DEF_PAD,
                          font="Helvetica 13",
                          background_color='white',
                          autoscroll=True,
                          tooltip='اپنا نوٹ لکھنا شروع کریں'
                          ),
             ],
            [sg.CB('نوٹ محفوظ کریں',
                   font="Helvetica 13 bold",
                   key="-SAVE_NOTE-",
                   text_color='black',
                   background_color='lightgrey',
                   default=True,
                   enable_events=True
                   ),
             ]
        ]

        return [
            [
                sg.Menu(menu, key="-MENU-"),
                sg.Col(column_content, scrollable=False),
                sg.VerticalSeparator(pad=DEF_PAD),
                sg.Frame(title="", layout=main_col,
                         background_color="lightgrey",
                         relief=sg.RELIEF_RAISED),
                sg.VerticalSeparator(pad=DEF_PAD),
                sg.Frame(
                    "نوٹس",
                    title_color="black",
                    size=(50, self.max_page_size[1]),
                    font="Helvetica 20 bold",
                    layout=notes_frame,
                    relief=sg.RELIEF_RIDGE,
                    border_width=4,
                    key="-NOTES_FRAME-",
                    background_color="lightgrey",
                    pad=DEF_PAD,
                    element_justification='c',

                ),

            ],
        ]

    def initialize_gui(self):

        #splash screen
        sg.Window('', [[sg.Image(data=SPLASH_SCREEN)]], transparent_color=sg.theme_background_color(),
        no_titlebar=True, keep_on_top=True).read(timeout=2000, close=True)

        title = "{} | DBR-PDFViewer".format(self.filename, self.total_pages)
        sg.DEFAULT_TOOLTIP_TIME = 10
        sg.change_look_and_feel('darkgrey4')
        sg.theme_background_color('lightgrey')
        window = sg.Window(
            title,
            return_keyboard_events=True,
            location=(0, 0),
            use_default_focus=False,
            layout=self.create_layout(),
            resizable=True,
            size=self.max_page_size,
            finalize=True,
            icon=LOGO,
            element_padding=(0, 0),

        )
        for key in window.AllKeysDict:
            if "BTN" in key:
                window[key].Widget.config(activebackground='darkgrey')
        window.Maximize()
        return window

    def search_text(self, text):
        total_matches = 0
        for page in self.document:
            number = page.number
            matches = self.document.searchPageFor(number, text)
            if matches:
                self.text_found_pages.append(number)
                for match in matches:
                    page.addHighlightAnnot(match)
                    total_matches += 1
        return total_matches

    def get_page_data(self, required_page, zoom=False, annotation=False):
        dlist = self.annotated_pages[required_page] if annotation else self.pages[required_page]
        if not dlist:
            if annotation:
                dlist = self.annotated_pages[required_page] = self.document[required_page].getDisplayList(
                )
            else:
                dlist = self.pages[required_page] = self.document[required_page].getDisplayList(
                )

        r = dlist.rect
        clip = r
        zoom_0 = 1
        if self.max_page_size:
            zoom_0 = min(
                1, self.max_page_size[0] / r.width, self.max_page_size[1] / r.height)
            if zoom_0 == 1:
                zoom_0 = min(
                    self.max_page_size[0] / r.width, self.max_page_size[1] / r.height)
        mat_0 = fitz.Matrix(zoom_0, zoom_0)

        if not zoom:
            pix = dlist.getPixmap(matrix=mat_0, alpha=False)
        img = pix.getImageData("ppm")  # make PPM image from pixmap for tkinter
        return img, clip.tl  # return image, clip position

    def show_search_pages(self, matches):
        self.current_page = self.text_found_pages[0]

    def update_image(self):
        self.form["-PAGE-"].Update(data=self.image_data[0])

    def show_popup(self, text):
        sg.popup(text,
                 background_color='lightgrey',
                 font="He 16 bold",
                 keep_on_top=True,
                 text_color='black',
                 grab_anywhere=True,
                 icon=ERROR
                 )

    def update_cur_page(self, value=0):
        if self.current_page < self.total_pages:
            self.current_page += value
        else:
            self.current_page = self.total_pages - 1
        pno = self.current_page + 1
        self.form["-PAGE_NUMBER-"].update(str(pno))
        self.form['-NOTE_PAGENUMBER-'].update('صفحہ نمبر : ' + str(pno))
        try:
            page_note = self.notes[pno]
        except KeyError as e:
            page_note = ''
        self.form['-NOTE_TEXT-'].update(value=page_note)

    def update_match_status(self):
        self.form['-MATCH_NUM_STATUS-'].update(
            value="{}/{}".format(self.cur_search_index + 1,
                                   len(self.text_found_pages))
        )

    def remove_annotations(self):
        self.annotated_pages = [None] * self.total_pages

    def search_down(self):
        if self.text_found_pages and len(self.text_found_pages) > self.cur_search_index:
            page_number = self.text_found_pages[self.cur_search_index]
            self.image_data = self.get_page_data(page_number, annotation=True)
            self.update_image()
            self.update_match_status()
            self.cur_search_index += 1
            self.current_page = page_number
            self.update_cur_page()
        elif len(self.text_found_pages) <= self.cur_search_index:
            self.show_popup("مزید میچ نہیں ہیں")

    def reset_controls(self):
        self.form['-BTN_PREVIOUS-'].update(disabled=False)

    def act_on_next_page(self):
        if not self.current_page == (self.total_pages - 1):
            if self.searching:
                self.search_down()
            else:
                self.save_note()
                self.update_cur_page(1)
                return True

    def act_on_previous_page(self):
        if self.current_page > 0:
            self.save_note()
            self.update_cur_page(-1)
            return True

    def save_note(self):
        note = self.form['-NOTE_TEXT-'].get()
        if self.form['-SAVE_NOTE-'].get() and note:
            self.notes[int(self.form["-PAGE_NUMBER-"].get())] = note

    def save_notes_to_file(self):
        self.save_note()
        with open(self.filename.split('/')[-1].split('.')[0] + '_notes.txt', 'w', encoding="utf-8") as note_file:
            note_file.write('\t\tاس فائل میں ترمیم نہ کریں\n\n')
            for page, note in self.notes.items():
                if note and note.split():
                    underline = ''.join(
                        ['=' for _ in range(len(str(page)) + 1)])
                    note_file.write("{}\n{}\n{}\n".format(
                        page, underline, note))

    def load_notes(self):
        try:
            with open(self.filename.split('/')[-1].split('.')[0] + '_notes.txt', 'r', encoding="utf-8") as note_file:
                count = 21
                for line in note_file:
                    try:
                        page_number = int(line)
                        count = 2
                    except ValueError as ex:
                        count -= 1
                    if count == 0:
                        self.notes[page_number] = line
        except Exception as e:
            pass

    def close_popup(self):
        return sg.popup_yes_no('کیا آپ واقعی فائل کو بند کرنا چاہتے ہیں؟',
                               text_color='black',
                               background_color='lightgrey',
                               line_width=50,
                               font='Helvetica 15 bold',
                               icon=QUESTION,
                               keep_on_top=True,
                               non_blocking=False
                               )

    def run(self):
        zoom_active = False

        while True:
            evt, value = self.form.Read()
            if not evt:
                break
            event = self.Event(evt)
            if event.quit():
                if self.close_popup() == 'Yes':
                    self.save_notes_to_file()
                    break
            change_page = False

            print(event, value)

            if event.open_file():
                new_file = PDFViewer.get_filename()
                if new_file and os.path.isfile(new_file):
                    if self.filename:
                        self.save_notes_to_file()
                    self.filename = new_file
                    self.fill_window()
                else:
                    self.show_popup('دیئے گئے نام کے ساتھ فائل نہیں ملی')

            if self.filename:
                if event.enter():
                    try:
                        page = int(value["-PAGE_NUMBER-"])
                        if self.total_pages > page > 0:
                            self.current_page = page - 1
                            self.save_note()
                            change_page = True
                        else:
                            self.show_popup("اس دستاویز میں ایسا کوئی صفحہ نمبر موجود نہیں ہے")
                            raise Exception()
                    except Exception as e:
                        self.show_popup("اس دستاویز میں ایسا کوئی صفحہ نمبر موجود نہیں ہے")

                    self.update_cur_page()

                elif event.toc():
                    self.current_page = self.TOC_tree.tree_dict[value['-TOC_TREE-'][0]].values
                    self.save_note()
                    self.update_cur_page(-1)
                    change_page = True

                elif event.next():
                    change_page = self.act_on_next_page()
                elif event.page_down():
                    change_page = self.act_on_next_page()

                elif event.prior():
                    change_page = self.act_on_previous_page()
                elif event.page_up():
                    change_page = self.act_on_previous_page()

                elif event.first_page():
                    self.save_note()
                    self.current_page = 0
                    self.update_cur_page()
                    change_page = True
                elif event.last_page():
                    self.save_note()
                    change_page = self.current_page = self.total_pages - 1
                    self.update_cur_page()

                elif event.cb_search():
                    self.searching = False or value['-SEARCH_CB-']
                    if not self.searching:
                        self.remove_annotations()
                        self.text_found_pages = []

                elif event.search():
                    if self.searching:
                        match = self.search_text(value['-FIND_TEXT-'])
                        if match:
                            self.update_match_status()
                        else:
                            message = "ہم نے تلاش ختم کی ہے اور کوئی میچ نہیں ملا۔\nبرائے کرم اپنے تلاش کے لفظ کو تبدیل کرنے کی کوشش کریں"
                            self.show_popup(message)

                elif event.down_search():
                    if self.searching:
                        self.search_down()

                elif event.close_file():
                    if self.close_popup() == 'Yes':
                        self.save_notes_to_file()
                        self.clear_window()

                elif event.up() and zoom_active:
                    pass
                    zoom = (self.image_data[1], 0, -1)
                elif event.down() and zoom_active:
                    pass
                    zoom = (self.image_data[1], 0, 1)
                elif event.left() and zoom_active:
                    pass
                    zoom = (self.image_data[1], -1, 0)
                elif event.right() and zoom_active:
                    pass
                    zoom = (self.image_data[1], 1, 0)
                elif event.zoom():
                    zoom_pressed = True
                    if not zoom_active:
                        zoom = (self.image_data[1], 0, 0)

                if change_page:
                    self.image_data = self.get_page_data(
                        self.current_page, False, False)
                    self.update_image()
        self.form.close()

    class Event:
        def __init__(self, event):
            self.event = event

        def toc(self):
            return self.event == '-TOC_TREE-'

        def cb_search(self):
            return self.event.startswith('-SEARCH_CB-')

        def first_page(self):
            return self.event == '-BTN_FIRST_PAGE-'

        def last_page(self):
            return self.event == '-BTN_LAST_PAGE-'

        def enter(self):
            return self.event.startswith("Return:") or self.event == chr(13)

        def quit(self):
            return self.event in (chr(27), 'بند کریں') or self.event.startswith("Escape:")

        def next(self):
            return self.event == "-BTN_NEXT-" or self.event == "MouseWheel:Down"

        def prior(self):
            return self.event == "-BTN_PREVIOUS-" or self.event == "MouseWheel:Up"

        def up(self):
            return self.event.startswith("Up:")

        def down(self):
            return self.event.startswith("Down:")

        def left(self):
            return self.event.startswith("Left:")

        def right(self):
            return self.event.startswith("Right:")

        def zoom(self):
            return self.event.startswith("Zoom")

        def search(self):
            return self.event == '-BTN_SEARCH-'

        def down_search(self):
            return self.event == '-BTN_DOWN_SEARCH-'

        def up_search(self):
            return self.event == '-BTN_UP_SEARCH-'

        def page_down(self):
            return self.event.startswith('Next')

        def page_up(self):
            return self.event.startswith('Prior')

        def is_MyKeys(self):
            return any((self.enter(), self.next(), self.prior(), self.zoom()))

        def open_file(self):
            return self.event in ('-BTN_OPEN_FILE-', 'کھولیں')

        def close_file(self):
            return self.event == '-BTN_CLOSE_FILE-'

        def __str__(self):
            return self.event


if __name__ == '__main__':
    viewer = PDFViewer()
    viewer.run()
